#include <iostream>
#include <string>
class Command {
public:
    virtual void execute() = 0;
    virtual ~Command() = default;
};
class Receiver {
public:
    void turnOn() {
        std::cout << "Receiver: Turned on." << std::endl;
    }

    void turnOff() {
        std::cout << "Receiver: Turned off." << std::endl;
    }
};

class TurnOnCommand : public Command {
private:
    Receiver* receiver;

public:
    TurnOnCommand(Receiver* r) : receiver(r) {}

    void execute() override {
        receiver->turnOn();
    }
};
class TurnOffCommand : public Command {
private:
    Receiver* receiver;

public:
    TurnOffCommand(Receiver* r) : receiver(r) {}

    void execute() override {
        receiver->turnOff();
    }
};

class Invoker {
private:
    Command* command;

public:
    void setCommand(Command* cmd) {
        command = cmd;
    }

    void pressButton() {
        command->execute();
    }
};
int main() {
    Receiver receiver;
    TurnOnCommand turnOn(&receiver);
    TurnOffCommand turnOff(&receiver);

    Invoker invoker;
    invoker.setCommand(&turnOn);
    invoker.pressButton(); 

    invoker.setCommand(&turnOff);
    invoker.pressButton(); 

    return 0;
}
