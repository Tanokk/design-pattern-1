#include <string>
#include <iostream>
class Component {
public:
    virtual void display() = 0; 
    virtual ~Component() = default;
};
class Leaf : public Component {
private:
    std::string name;
public:
    Leaf(const std::string& name) : name(name) {}

    void display() override {
        std::cout << "Leaf: " << name << std::endl;
    }
};
class Composite : public Component {
private:
    Component* children[10];  
    int childCount = 0;       

public:
    void add(Component* component) {
        if (childCount < 10) {
            children[childCount++] = component;
        }
    }
    void display() override {
        std::cout << "Composite: " << std::endl;
        for (int i = 0; i < childCount; ++i) {
            children[i]->display();
        }
    }
};
int main() {
    Leaf* leaf1 = new Leaf("Leaf 1");
    Leaf* leaf2 = new Leaf("Leaf 2");
    Leaf* leaf3 = new Leaf("Leaf 3");
    Composite* composite1 = new Composite();
    composite1->add(leaf1);
    composite1->add(leaf2);
    Composite* composite2 = new Composite();
    composite2->add(leaf3);
    composite2->add(composite1);
    composite2->display(); 
    return 0;
}
